#+HUGO_BASE_DIR: .
#+HUGO_SECTION: /

* Blog
** t h e   y - c o m b i n a t o r                                                                 :scheme:programming:
:PROPERTIES:
:EXPORT_FILE_NAME: the-y-combinator
:EXPORT_DATE: 2019-03-20
:END:
owo

#+BEGIN_SRC scheme
(λ (f)
  ((λ (x) (f (x x)))
   (λ (x) (f (x x)))))
#+END_SRC
** Writing our own event loops in python                                                           :python:programming:
:PROPERTIES:
:EXPORT_FILE_NAME: writing-our-own-event-loops-in-python
:EXPORT_DATE: 2019-03-20
:END:

One of the good features of python is it's native support for coroutines,
generalised functions that can be paused and resumed, allowing objects to be
passed between the coroutine and whoever is running them when at the time.

The most widely used place for Python's coroutines currently is in asyncio
frameworks, namely the standard library module: AsyncIO, [[https://github.com/python-trio/trio][Trio]], and [[https://github.com/dabeaz/curio][Curio]]. These
use python coroutines to allow the user to write code that requires IO resources
that may not be available at some point when their code runs, but will be in the
future. Without coroutine functions the alternative to this is promises, where
an IO request has a function attached that will run when the IO has completed,
however this approach leads to code becoming deeply nested and hard to work
with.

Coroutines fix this by allowing the function to be paused whenever an IO request
is made, the writer of the coroutine doesn't have to know that the function will
be paused and can write their function as if the IO resource magically becomes
available as soon as requested, they only need to insert the extra `await`
keyword to retrieve the results of other coroutines.

An example of a 'blocking' non async function:

#+BEGIN_SRC python
def make_request(url):
    result = my_http_lib.get(url)
    return result["data"]["some_value"]
#+END_SRC

This could be rewritten using promises to get:

#+BEGIN_SRC python
def make_request(url):
    return my_http_lib.get(url).then(lambda r: r["data"]["some_value"])
#+END_SRC

However that leads to messy code happening quickly, instead async functions the
following could be written:

#+BEGIN_SRC python
async def make_request(url):
    result = await my_async_http_lib.get(url)
    return result["data"]["some_value"]
#+END_SRC

Which as you can see, is practically identical in structure to the blocking version.

Asynchronous IO isn't the only problem that can be solved using coroutines, I am
now going to show how you can use coroutines to write a program that can resolve
references written in any order.

First, we need an object to signal actions to the event loop:

#+BEGIN_SRC python
from enum import Enum, auto

class RequestType(Enum):
    set_var = auto()
    get_var = auto()
#+END_SRC

We'll use tuples of a request and arguemtns to signal to the event loop what we
want performing.

Then we need an event loop

#+BEGIN_SRC python
from types import coroutine
from dataclasses import dataclass


@dataclass
class EventObject:
    coro: coroutine  # the running coroutine
    response: object = None  # the value to send to the object


class ELoop:
    def __init__(self):
        self.waiting = {}
        self.queue = []
        self.namespace = {}

    def sleep(self, obj, name):
        # multiple coros may wait on the same name, so store in a list
        also_waiting = self.waiting.setdefault(name, [])
        also_waiting.append(obj)

    def run_once(self):
        obj = self.queue.pop()

        while True:
            try:
                task, *args = obj.coro.send(obj.response)
                obj.response = None  # reset to none after sending
            except StopIteration:
                return

            if task is RequestType.set_var:
                name, value = args
                self.namespace[name] = value
            elif task is RequestType.get_var:
                # see if we know the name, if we do: set the value to send and
                # continue
                name = args[0]
                if name in self.namespace:
                    obj.response = self.namespace[name]
                    continue

                # if we reached here, the name isn't known yet, put the coro to sleep
                self.sleep(obj, name)
                return
            else:
                # throw an exception to the coroutine
                obj.coro.throw(ValueError("Invalid value yielded to loop"))

    def process(self, procs):
        # add processes to our queue
        self.queue.extend(EventObject(i) for i in procs)

        while self.queue:
            self.run_once()
            # after running once, we should scan and
            # see if any names are now known
            for name in tuple(self.waiting.keys()):
                if name in self.namespace:
                    response = self.namespace[name]

                    # this name is now known, wake up any coros that were
                    # waiting on it and add them to the queue
                    woke_objs = self.waiting.pop(name)

                    for obj in woke_objs:
                        obj.response = response

                    self.queue.extend(woke_objs)
#+END_SRC

And now we can write some functions that encode a computation of setting or
getting a variable:

#+BEGIN_SRC python
from types import coroutine

@coroutine
def set_var(name, value):
    yield RequestType.set_var, name, value


@coroutine
def get_var(name):
    return (yield RequestType.get_var, name)
#+END_SRC

Now we can write some programs:

#+BEGIN_SRC python
async def do_some_math():
    await set_var("one", 1)
    await set_var("two", 2)
    three = await get_var("three")
    four = await get_var("four")
    seven = three + four
    await set_var("seven", seven)
    print("Done some math")

async def do_some_more_math():
    one = await get_var("one")
    two = await get_var("two")
    three = one + two
    four = three + one
    await set_var("three", three)
    await set_var("four", four)
    seven = await get_var("seven")
    print(f"Done some more math, ended with: {seven}")
#+END_SRC

To run these we would do the following:

#+BEGIN_SRC python
loop = ELoop()

procs = [do_some_math(), do_some_more_math()]

loop.process(procs)
#+END_SRC

Running these gives the result:

#+BEGIN_SRC python
In [17]: loop.process(procs)
Done some math
Done some more math, ended with: 7
#+END_SRC

Pretty neat, huh?

** Writing a discord library using Polysemy                                                        :programming:haskell:polysemy:free_monads:
:PROPERTIES:
:EXPORT_FILE_NAME: writing-a-discord-library-using-polysemy
:EXPORT_DATE: 2020-04-24
:END:

Recently I've rewritten my [[github:nitros12/calamity][discord library]] to use [[github:isovector/polysemy][polysemy]] instead of
mtl/transformers, in this[fn:1] and some upcoming blog post I'll be writing about the
challenges I faced and solved[fn:2] while going about the conversion.

*** Logging
The first effect that I converted from mtl to Polysemy was logging, originally I
was using [[https://hackage.haskell.org/package/simple-log][simple-log]] because I liked being able have areas of code run inside
logging 'scopes', at the time [[https://hackage.haskell.org/package/co-log-polysemy][co-log-polysemy]] was the only existing logging
framework for polysemy and I was planning to use it, but instead I found [[https://hackage.haskell.org/package/di][di]] and
decided to write a [[github:nitros12/di-polysemy][Polysemy effect for it]].

The effect is higher order so I guess this is an example of writing higher order effects.

#+BEGIN_SRC haskell
data Di level path msg m a where
  Log    :: level -> msg -> Di level path msg m ()
  Flush  :: Di level path msg m ()
  Push   :: D.Segment -> m a -> Di level D.Path msg m a
  Attr_  :: D.Key -> D.Value -> m a -> Di level D.Path msg m a
#+END_SRC

I went on to write an interpreter making use of the existing framework in Di for
printing out the log, which I found simple to write as it mostly consisted of
playing jigsaw with types:

#+BEGIN_SRC haskell
go :: Member (Embed IO) r0 => DC.Di level D.Path msg -> Sem (Di level D.Path msg ': r0) a0 -> Sem r0 a0
go di m = (`interpretH` m) $ \case
  Log level msg -> do
    t <- embed @IO $ DC.log di level msg
    pureT t
  Flush         -> do
    t <- embed @IO $ DC.flush di
    pureT t
  Push s m'     -> do
    mm <- runT m'
    raise $ go (Df1.push s di) mm
  Attr_ k v m'  -> do
    mm <- runT m'
    raise $ go (Df1.attr_ k v di) mm
#+END_SRC

The handlers for ~Log~ and ~Flush~ are simple enough, just embed the IO action
and wrap the result, and the handlers for ~Push~ and ~Attr~ consist of running
the nested action with the modified logger state, this is pretty much ~Reader~
and I could probably rewrite this to just reinterpret the ~Di~ effect in terms
of ~Reader~.

However this interpreter needs to get a [[https://hackage.haskell.org/package/di-core-1.0.4/docs/Di-Core.html#t:Di][~Di.Core.Di~]] from somewhere, and the
only place to do that[fn:3] is to use [[https://hackage.haskell.org/package/di-core-1.0.4/docs/Di-Core.html#v:new][Di.Core.new]] which has the signature:

#+BEGIN_SRC haskell
new
  :: forall m level path msg a
  .  (MonadIO m, Ex.MonadMask m)
  => (Log level path msg -> IO ())
  -> (Di level path msg -> m a)
  -> m a
#+END_SRC

That [[https://hackage.haskell.org/package/exceptions-0.10.0/docs/Control-Monad-Catch.html#t:MonadMask][~MonadMask~]] constraint means that we can't just use polysemy's ~Sem r~
monad, my first resolution to this was to [[https://github.com/nitros12/di-polysemy/blob/863cc0072d846b1d96eca6467bc836bd098f7bb7/src/DiPolysemy.hs#L68-L124][copy the source of ~new~]] and replace
[[http://hackage.haskell.org/package/safe-exceptions-0.1.7.0/docs/Control-Exception-Safe.html#v:finally][~Control.Exception.Safe.finally~]] with polysemy's [[https://hackage.haskell.org/package/polysemy-1.3.0.0/docs/Polysemy-Resource.html#v:finally][~Resource.finally~]][fn:4]

This way required too much hackery for my liking, so I spent some time
figuring out how to lower a ~Member (Embed IO) r => Sem r a~ to ~IO a~, and
luckily the [[https://hackage.haskell.org/package/polysemy-1.3.0.0/docs/src/Polysemy.Resource.html#resourceToIO][~Resource~]] effect does pretty much what I want to do already, so my
current solution is to create a higher order effect with a single operation:

#+BEGIN_SRC haskell
data DiIOInner m a where
  RunDiIOInner :: (DC.Log level D.Path msg -> IO ()) -> (DC.Di level D.Path msg -> m a) -> DiIOInner m a
#+END_SRC

And define an interpreter:

#+BEGIN_SRC haskell
diToIO :: forall r a. Member (Embed IO) r => Sem (DiIOInner ': r) a -> Sem r a
diToIO = interpretH
  (\case RunDiIOInner commit a -> do
           istate <- getInitialStateT
           ma <- bindT a

           withLowerToIO $ \lower finish -> do
             let done :: Sem (DiIOInner ': r) x -> IO x
                 done = lower . raise . diToIO

             DC.new commit (\di -> do
                               res <- done (ma $ istate $> di)
                               finish
                               pure res))
#+END_SRC

This effect is only ever used internally in the implementation of ~runDiToIO~:

#+BEGIN_SRC haskell
runDiToIO
  :: forall r level msg a.
  Member (Embed IO) r
  => (DC.Log level D.Path msg -> IO ())
  -> Sem (Di level D.Path msg ': r) a
  -> Sem r a
runDiToIO commit m = diToIO $ runDiIOInner commit (`go` raiseUnder m)
  where
    go :: -- ...
#+END_SRC

I'm not sure if this is the best way to perform the ritual of lowering the Sem
monad to IO, but I can't see any way to perform it without having the ad-hoc
effect.

Anyway, after writing the interpreter, the helper functions can be written,
they're fairly repetitive so I'll only include the first few:

#+BEGIN_SRC haskell
runDiToStderrIO :: Member (Embed IO) r => Sem (Di D.Level D.Path D.Message ': r) a -> Sem r a
runDiToStderrIO m = do
  commit <- embed @IO $ DH.stderr Df1.df1
  runDiToIO commit m

attr :: forall value level msg r a. (D.ToValue value, Member (Di level D.Path msg) r) => D.Key -> value -> Sem r a -> Sem r a
attr k v = attr_ @level @msg k (D.value v)

debug :: forall msg path r. (D.ToMessage msg, Member (Di D.Level path D.Message) r) => msg -> Sem r ()
debug = log @D.Level @path D.Debug . D.message

info :: forall msg path r. (D.ToMessage msg, Member (Di D.Level path D.Message) r) => msg -> Sem r ()
info = log @D.Level @path D.Info . D.message
#+END_SRC

The manual type applications would normally not be necessary if you were to use
[[https://hackage.haskell.org/package/polysemy-plugin][~Polysemy.Plugin~]], but haddock currently (GHC 8.6.5) dies when it tries to build
docs with the plugin enable.

**** Usage
Now that the logger effect is written, we can use it like so:

#+BEGIN_SRC haskell
import qualified Df1
import           DiPolysemy
import           Polysemy
import           Prelude                     hiding ( error )

main :: IO ()
main = runM . runDiToStderrIO $ logTest

logTest :: Member (Di Df1.Level Df1.Path Df1.Message) r => Sem r ()
logTest = do
  info_ "hello"
  notice_ "this is a notice"
  push "some-scope" $ do
    warning_ "this is inside a scope"
    attr "x" (4 :: Int) $ do
      debug_ "this one has an attribute"
  emergency_ "and we're done"
#+END_SRC

Which produces the following:

#+BEGIN_SRC
2020-04-25T03:59:44.452126488Z INFO hello
2020-04-25T03:59:44.452136280Z NOTICE this is a notice
2020-04-25T03:59:44.452147183Z /some-scope WARNING this is inside a scope
2020-04-25T03:59:44.452156206Z /some-scope x=4 DEBUG this one has an attribute
2020-04-25T03:59:44.452162458Z EMERGENCY and we're done
#+END_SRC

*** Footnotes
[fn:1] This blog post was sponsored by [[https://theophile.choutri.eu/microfund.html][theophile.choutri.eu/microfund]]

[fn:2] although some of my solutions I feel aren't the best, and I'd love
to be made aware of any alternate solutions

[fn:3] Without writing my own logger

[fn:4] Though this implementation probably doesn't respect async exceptions
correctly in some way.

* COMMENT Local Variables                                                                           :ARCHIVE:

# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:

#  LocalWords:  haskell monads coroutines
